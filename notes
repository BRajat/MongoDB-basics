# MongoDB - notes.txt

### Reference -
[Mongo- Cheat Sheet](https://www.mongodb.com/developer/quickstart/cheat-sheet/)



1. MongoDB stores data in BSON format which is faster has more data types and compact, but not human readable.

2. json is for viewing bson

--
Connecting to the database
--

COMMANDS-

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"


--
Dumping, exporting and importing data
--

mongodump - get data in bson format
mongoexport - stores json format of same data

mongorestore - drops bson
mongoimport - drops json

COMMMANDS-

mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"

mongoexport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --collection=sales --out=sales.json

mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump

mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

--
Browsing Collections in Atlas
--

filter data in collections by querying in browser.

--
Querying data in mongo  cli-
--

connect to database and then query using below command.

COMMANDS -

show dbs

use sample_training

show collections

-- filter commands
db.zips.find({"state": "NY"})

-- count commands
db.zips.find({"state": "NY"}).count()

-- filter on more fields
db.zips.find({"state": "NY", "city": "ALBANY"})

-- for easy reading
db.zips.find({"state": "NY", "city": "ALBANY"}).pretty()

-----
connection:

mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

--
quiz question:


Query Answer:
[

mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_training

db.trips.find({"birth year":1961, "start station name":"Howard St & Centre S"}).pretty()

]

-----
CRUD OPERATIONS on MongoDB 
-----

--
Inserting New Documents - ObjectId
--

Every document has different "_id" field. 
Inserting documents in Data Explorer
Inserting documents using Mongo Shell-

db.inspections.findOne();

db.inspections.insert({
      "_id" : ObjectId("56d61033a378eccde8a8354f"),
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.insert({
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.find({"id" : "10021-2015-ENFO", "certificate_number" : 9278806}).pretty()

-------------
UPDATE - from data explorer
-------------

quiz:


mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_training

db.zips.updateMany({"state":"NY","city":"NEW YORK"},{"$set":{"capital?":false}})

db.zips.updateMany({"state":"NY","city":"ALBANY"},{"$set":{"capital?":true}})

--------------
MQL operators:
---

Update operators
$inc, $set, $unset
$eq, $neq
$gt, $gte
$lt, $lte

--------------
quiz question: find how many companies of category_code web or social are either founder in 2004 or in monthe of October?

mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_training

db.companies.find({"$and":[{"$or":[{"category_code":"web"},{"category_code":"social"}]},{"$or":[{"founded_year":2004},{"founded_month":10}]}]}).count()

db.companies.find({"$or":[{"category_code":"web"},{"category_code":"social"}]}).count()

db.companies.find({"$or":[{"founded_year":2004},{"founded_month":10}]}).count()

--------------------------------
Expressive $expr

{"$expr":<aggregation>}

---
PROPERTY :
		[	$<key> ==> value	]
		
example MQL query:
db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }
              }).count()


----------
quiz :
db.companies.find({"$expr": {"$eq":["$permalink","$twitter_username"] } }).count()

----------------------------
ARRAY OPERATORS:

$push = pushes value to array [OR] turns a field into an array

While comparing exact values of array, Order of elements in array matters. Simple string matches also, work [OR] use the $all comparision for array fields.

example - 

db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()


---------------

mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_airbnb

db.listingsAndReviews.find({"reviews":{"$size":50}}).count()

db.listingsAndReviews.find({"accommodates":{"$gte":7}}).count()

db.listingsAndReviews.find({"reviews":{"$size":50}} , {"accommodates":{"$gte":7}}).count()

--
db.listingsAndReviews.find({"$and":[{"property_type":"House"} , {"amenities":"Changing table"}]}).count()
--

db.listingsAndReviews.find(
  { "amenities":
      { "$all": [ "Free parking on premises", "Wifi", "Air conditioning" ] }}, {"bedrooms":{ "$gte":  2 } } ).count()
      
-----------


db.listingsAndReviews.find({"amenities": "Free parking on premises","amenities": "Wifi","amenities": "Air conditioning","bedrooms": { "$gte": 2 }}).count()

---------------
---------------
Array Operators and Projection

db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()

db.companies.find({"offices":{"$elemMatch":{"city":"Seattle"}}}).count()

db.trips.find({"start station location.coordinates.0":{"$lt":-74}}).count()

db.inspections.find({"address.city":"NEW YORK"}).count()

-----------------------
Aggregation queries (different from MQL)

db.listingsAndReviews.aggregate([
                                  { "$match": { "amenities": "Wifi" } },
                                  { "$project": { "price": 1,
                                                  "address": 1,
                                                  "_id": 0 }}]).pretty()

---
db.listingsAndReviews.findOne({},{"address":1,"_id":0})

---
aggregation of room_types


mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_airbnb

db.listingsAndReviews.aggregate([ {"project":{"room_type":1,"_id":0} },{"$group":{"_id": "$room_type"} } ] )
				   
db.listingsAndReviews.aggregate([ "$group":{"_id": "room_type"} } ] )

-----------------------
sort and limit

quiz: youngest bike rider from trips collection


mongo "mongodb+srv://m001-student:m001-mongodb-basics@cluster0.fels2.mongodb.net/admin"

use sample_training

db.trips.find({"birth year":{"$ne": ""}},{"birth year":1, "_id":0}).sort({"birth year":-1}).limit(1)
----------------------
Compound index 

use sample_training

db.trips.find({ "birth year": 1989 })

db.trips.find({ "start station id": 476 }).sort( { "birth year": 1 } )

--
Creating index on one field
db.trips.createIndex({ "birth year": 1 })

Creating index on multiple field: Compound Index
db.trips.createIndex({ "start station id": 1, "birth year": 1 })

--------------------
Data Modelling : Organize fields in documents such that -
reliably stored and retrieved.

--------------
Upsert : True - When to use?

Idempotent usage - if present update else insert

----

